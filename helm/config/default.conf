
{{- $serviceName := include "geoserver.fullname" . -}}

upstream geoserver {
    server {{ $serviceName }}:{{ .Values.service.port }};
}

server {
    listen      {{ .Values.nginx.targetPort }};
    # the domain name it will serve for
    server_name geoserver;
    # max upload size, adjust to taste
    keepalive_timeout  500;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    send_timeout                600;
    client_max_body_size        5000;
    client_header_timeout       600;
    client_body_timeout         600;
    client_header_buffer_size   12288; # 12K
    large_client_header_buffers 4 12288; # 12K
    location /liveness {
        access_log    off;
        log_not_found off;
        return 200 "I'm alive\n";
    }

    location {{ .Values.nginx.route.rewriteTarget }} {
        set $original_method $request_method;
        set $original_args $args;

        {{ if .Values.nginx.authorization.enabled }}
        set $domain {{ .Values.nginx.authorization.domain }};
        auth_request /_validate_jwt;
        {{ end }}

        proxy_pass http://geoserver;
        proxy_pass_header Set-Cookie;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_hide_header Access-Control-Allow-Origin;
    }

    {{ if .Values.nginx.authorization.enabled }}
    location = /_validate_jwt {
      internal;

      js_content auth.opaAuth;
    }

    location = /opa {
      internal;

      proxy_set_header Content-Type application/json;
      proxy_pass {{ .Values.nginx.authorization.url }};
    }    
    {{ end }}
}

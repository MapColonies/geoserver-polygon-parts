global:
  pullPolicy: Always
  pullSecretName: acr-registry
  cloudProvider: {}
  environment: ''
  authentication:
    jwtPublicKeySecretName: map-colonies-jwks
  db:
    host: ""
    name: ""
    port: 5432
  storage:
    fs:
      internalPvc:
        name: ""
        mountPath: ""
        geoserverDataDirSubPath: "" 

cloudProvider: {}

### Useful for umbrella deployments in cases which no need geoserver serving ###
enabled: true

image:
  geoserverRepository: geoserver-os
  geoserverTag: "latest"
  sidecarRepository: pp-geoserver-side-car
  sidecarTag: "latest"

updateInterval: 10000

geoserverUser: admin


replicaCount: 1

nameOverride: ""
fullnameOverride: pp-geoserver

geoserverPassword: geoserver

initialMemory: "128M"
maxMemory: "756M"

storage:
  fs:
    internalPvc:
      name: internal-pvc-nfs
      mountPath: /data_dir
      geoserverDataDirSubPath: geoserver_data_dir

readiness:
  path: "/geoserver" # change it according to workspace name changing

db:
  host: ""
  name: ""
  port: 5432

rootCerts:
  enabled: false
  secretName: secret-name
  mountPath: '/tmp/root-certs'

pgSslAuth:
  enabled: false
  secretName: secret-name
  mountPath: '/tmp/certs-postgres'

# Define this for extra GeoServer environment variables
extraGeoserverEnv: |
  - name: COMMUNITY_EXTENSIONS
    value: "cog-plugin"
  - name: JAVA_OPTS
    value: '-DALLOW_ENV_PARAMETRIZATION=true'
  - name: PROXY_BASE_URL
    value: /geoserver 
#  - name: KEY_2
#    value: "VALUE_2"

extraSidecarEnv: |
#  - name: KEY_1
#    value: "VALUE_1"
#  - name: KEY_2
#    value: "VALUE_2"

labels: {}
annotations: {}

podAnnotations: {}

resources:
  enabled: false
  limits:
    cpu: 2
    memory: 4500Mi
  requests:
    cpu: 2
    memory: 4000Mi

sidecarResources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

service:
  ## GeoServer service type
  type: ClusterIP
  # clusterIP: ""
  # externalIPs: ""
  port: 80

  # nodePort:

  labels: |
  annotations: |
  # loadBalancerIP:

  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

route:
  enabled: false
  tls: false
  path: /geoserver

sideCar:
  env:
    logLevel: "info"
    logPretty: "false"
    ssl:
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
  
    dataStore:
      user: "postgres"
      password: "postgres"
      dbType: "postgis"
      schema: "polygon_parts"
      name: "polygon_parts"
      ssl: 'DISABLE'
    polygonPartsWorkspaceName: "polygon_parts" # remember update also the readiness path in case of change
    geoserverBaseUrl: "http://localhost:8080/geoserver"
    layer:
      maxFeatures: 0
      numDecimals: 0
      titleName: "polygon_parts"

nginx:
  enabled: true
  replicaCount: 1
  fullnameOverride: ""
  image:
    repository: nginx-otel-unprivileged
    tag: 'v1.0.0' 
  port: 8080
  internalServicePort: 80
  targetPort: 8080
  servicePort: 8080
  nodePort: 30001
  
  authorization:
    enabled: true
    domain: 'raster'
    url: http://opa-service.infra-services/v1/data/http/authz/decision

  extraVolumes:
    - name: nginx-config
      configMap:
        name: '{{ .Release.Name }}-nginx-configmap'

  extraVolumeMounts: 
    - name: nginx-config
      mountPath: "/etc/nginx/conf.d/default.conf"
      subPath: default.conf
    - mountPath: "/etc/nginx/nginx.conf"
      name: nginx-config
      subPath: nginx.conf

  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi     

  route:
    enabled: true
    routesMapping:
      - host:
        path: /api/raster/v1
    rewriteTarget: "/geoserver"
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)
    tls:
      enabled: true
      useCerts: false
      certificate: ''
      key: ''
      caCertificate: ''

  ingress:
    enabled: false
    path: /api/raster/v1
    host: 'localhost'
    tls: 
      enabled: true
      useExternal: ''
